@using FormsApp.Data
@using FormsApp.Shared
@inject LocalizationService Loc
@inject IFormService FormService
@inject NavigationManager Navigation
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService

<div class="toolbar mb-2">
    <button class="btn btn-danger"
            @onclick="@(() => TableUtils.DeleteSelected(selectedForms, forms, DeleteForm, f => f.Id))"
            disabled="@(!selectedForms.Any())">
        @Loc["DeleteSelected"]
    </button>
</div>
<SortableTable TItem="Form"
               Items="SortedForms"
               Columns="columns"
               SortField="sortColumn"
               SortDirection="@(sortAscending ? "asc" : "desc")"
               OnSort="OnSort"
               OnRowClick="OnRowClickForm">
    <RowTemplate Context="form">
        <td><input type="checkbox" checked="@selectedForms.Contains(form.Id)" @onchange="e => TableUtils.UpdateSelection(e, form.Id, selectedForms, SortedForms.Select(f => f.Id).ToList())" @onclick:stopPropagation /></td>
        <td>@(form.Template?.Title ?? "Неизвестно")</td>
        <td>@(form.Template?.AuthorId != null && userNames.ContainsKey(form.Template.AuthorId) ? userNames[form.Template.AuthorId] : form.Template?.AuthorId)</td>
        <td>@TableUtils.TruncateDescription(form.Template?.Description ?? string.Empty)</td>
        <td>@form.FilledAt.ToShortDateString()</td>
    </RowTemplate>
</SortableTable>

@code {
    private List<Form> forms = new();
    private List<int> selectedForms = new();
    private string sortColumn = "FilledAt";
    private bool sortAscending = true;
    private List<SortableTable<Form>.SortableColumn> columns;
    private Dictionary<string, Func<Form, object?>> sortSelectors;
    private List<Form> SortedForms => TableUtils.GetSorted(forms, sortColumn, sortAscending, sortSelectors, "FilledAt");
    private string? userId;
    private Dictionary<string, string> userNames = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (userId != null)
        {
            forms = FormService.GetUserForms(userId);
            var allUserIds = forms.Select(f => f.Template?.AuthorId).Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList();
            var users = UserService.GetAllUsers().Where(u => allUserIds.Contains(u.Id)).ToList();
            userNames = users.ToDictionary(u => u.Id, u => GetDisplayName(u.UserName));
        }
        columns = new()
        {
            new() { Title = "", Field = "Select", Sortable = false },
            new() { Title = Loc["Title"], Field = "Title", Sortable = true },
            new() { Title = Loc["Author"], Field = "Author", Sortable = true },
            new() { Title = Loc["Description"], Field = "Description", Sortable = true },
            new() { Title = Loc["Date"], Field = "FilledAt", Sortable = true }
        };
        sortSelectors = new()
        {
            ["Title"] = f => f.Template?.Title ?? string.Empty,
            ["Author"] = f => f.Template?.AuthorId ?? string.Empty,
            ["Description"] = f => f.Template?.Description ?? string.Empty,
            ["FilledAt"] = f => f.FilledAt
        };
    }
    private void OnSort(string column) => TableUtils.OnSort(ref sortColumn, ref sortAscending, column);
    private void DeleteForm(int formId) => TableUtils.DeleteItem(formId, forms, FormService.DeleteForm, f => f.Id);
    private void OnRowClickForm(Form form) => Navigation.NavigateTo($"/filled/{form.Id}");
    private string GetDisplayName(string? userName)
    {
        if (string.IsNullOrEmpty(userName))
            return string.Empty;
        var atIndex = userName.IndexOf('@');
        return atIndex > 0 ? userName.Substring(0, atIndex) : userName;
    }
} 