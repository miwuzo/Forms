@page "/fill/{Id:int}"
@using FormsApp.Data
@using Microsoft.EntityFrameworkCore
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject LocalizationService Loc
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> L
@inject ITemplateService TemplateService
@inject IFormService FormService
@inject ICommentService CommentService
@inject ILikeService LikeService

<PageTitle>@Loc["FillTemplate"]</PageTitle>

<div class="container mt-4">
    @if (!string.IsNullOrEmpty(accessError))
    {
        <div class="alert alert-danger">
            <h4>@Loc["AccessDenied"]</h4>
            <p>@accessError</p>
        </div>
    }
    else if (!hasAccess)
    {
        <div class="alert alert-warning">
            <h4>@Loc["CheckingAccess"]</h4>
            <p>@Loc["PleaseWait"]</p>
        </div>
    }
    else
    {
        <h2>@Template.Title</h2>
        <p>@Template.Description</p>
        
        @if (hasExistingForm)
        {
            <div class="alert alert-info">
                <i class="oi oi-info"></i>
                <strong>@Loc["Warning"]:</strong> @Loc["ExistingFormWarning"]
            </div>
        }
        
        <form @onsubmit="HandleSubmit">
            @foreach (var field in Template.Fields.OrderBy(f => f.Order))
            {
                <div class="mb-3">
                    <label>@field.Label</label>
                    @if (field.Type == FieldType.Checkbox)
                    {
                        <input type="checkbox"
                               class="form-check-input"
                               checked="@(BoolAnswers.ContainsKey(field.Id) && BoolAnswers[field.Id])"
                               @onchange="e => BoolAnswers[field.Id] = ((ChangeEventArgs)e).Value is bool b && b" />
                    }
                    else if (field.Type == FieldType.Integer)
                    {
                        <input type="number"
                               class="form-control"
                               value="@(IntAnswers.ContainsKey(field.Id) ? IntAnswers[field.Id] : 0)"
                               @onchange="e => IntAnswers[field.Id] = int.TryParse(e.Value?.ToString(), out var v) ? v : 0" />
                    }
                    else if (field.Type == FieldType.String)
                    {
                        <input type="text"
                               class="form-control"
                               value="@(StringAnswers.ContainsKey(field.Id) ? StringAnswers[field.Id] : string.Empty)"
                               @onchange="e => StringAnswers[field.Id] = e.Value?.ToString() ?? string.Empty" />
                    }
                    else if (field.Type == FieldType.MultilineText)
                    {
                        <textarea class="form-control"
                                  @onchange="e => StringAnswers[field.Id] = e.Value?.ToString() ?? string.Empty">@(
                            StringAnswers.ContainsKey(field.Id) ? StringAnswers[field.Id] : string.Empty
                        )</textarea>
                    }
                </div>
            }
            <button class="btn btn-primary" type="submit">@Loc["Send"]</button>
        </form>
        
        @if (Template.Id > 0)
        {
            <div class="likes-section">
                <span class="likes-count">@Loc["Likes"]: @likes</span>
                <button class="like-btn @(userLiked ? "liked" : "")" @onclick="AddLike">@Loc["Like"]</button>
            </div>
            
            <div class="comments-section">
                <div class="comments-header">
                    <span class="comments-count">@Loc["Comments"]: @comments.Count</span>
                </div>
                
                <div class="comment-form">
                    <textarea class="comment-textarea" 
                              placeholder="@Loc["LeaveComment"]" 
                              @bind="commentText"
                              disabled="@(userId == null)"></textarea>
                    <button class="comment-submit-btn" 
                            @onclick="AddComment" 
                            disabled="@(string.IsNullOrWhiteSpace(commentText) || userId == null)">
                        @Loc["AddComment"]
                    </button>
                </div>
                
                <ul class="comments-list">
                    @foreach (var comment in comments)
                    {
                        <li class="comment-item">
                            <div class="comment-header">
                                <span class="comment-author">@(comment.User?.UserName ?? comment.UserId)</span>
                                <div class="comment-actions">
                                    <span class="comment-date">@comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                                    @if (CanDeleteComment(comment))
                                    {
                                        <button class="comment-delete-btn" @onclick="() => DeleteComment(comment.Id)" title="@Loc["DeleteComment"]">
                                            <i class="oi oi-trash"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                            <p class="comment-text">@comment.Text</p>
                        </li>
                    }
                </ul>
            </div>
        }
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    private Template Template = new() { Fields = new List<FormField>() };
    private Dictionary<int, string> StringAnswers = new();
    private Dictionary<int, int> IntAnswers = new();
    private Dictionary<int, bool> BoolAnswers = new();
    private string? userId;
    private bool hasAccess = false;
    private string? accessError = null;
    private bool hasExistingForm = false;
    private int likes = 0;
    private bool userLiked = false;
    private List<Comment> comments = new();
    private string commentText = string.Empty;
    private bool canEdit = false;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/Identity/Account/Login", true);
            return;
        }
        Template = TemplateService.GetTemplateById(Id) ?? Template;
        if (Template.Id == 0)
        {
            accessError = Loc["TemplateNotFound"];
            return;
        }
        var user = authState.User;
        userId = user.Identity?.IsAuthenticated == true ? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value : null;
        canEdit = user.Identity?.IsAuthenticated == true && (userId == Template.AuthorId || user.Claims.Any(c => c.Type == "role" && c.Value == "Admin"));
        isAdmin = user.Claims.Any(c => c.Type == "role" && c.Value == "Admin");
        hasAccess = await CheckAccessToTemplate(Template.Id, user);
        if (!hasAccess)
        {
            accessError = Loc["NoAccessToFill"];
            return;
        }
        likes = LikeService.GetLikesCount(Template.Id);
        userLiked = userId != null && LikeService.UserLiked(Template.Id, userId);
        comments = CommentService.GetCommentsByTemplateId(Template.Id);
        if (userId != null)
        {
            var existingForm = FormService.GetFormsByTemplateId(Id).FirstOrDefault(f => f.UserId == userId);
            if (existingForm != null)
            {
                hasExistingForm = true;
                foreach (var answer in existingForm.Answers)
                {
                    var field = Template.Fields.FirstOrDefault(f => f.Id == answer.FieldId);
                    if (field != null)
                    {
                        switch (field.Type)
                        {
                            case FieldType.Checkbox:
                                BoolAnswers[field.Id] = answer.Value == "true";
                                break;
                            case FieldType.Integer:
                                IntAnswers[field.Id] = int.TryParse(answer.Value, out var i) ? i : 0;
                                break;
                            default:
                                StringAnswers[field.Id] = answer.Value;
                                break;
                        }
                    }
                }
            }
        }
        foreach (var field in Template.Fields)
        {
            switch (field.Type)
            {
                case FieldType.Checkbox:
                    if (!BoolAnswers.ContainsKey(field.Id)) BoolAnswers[field.Id] = false;
                    break;
                case FieldType.Integer:
                    if (!IntAnswers.ContainsKey(field.Id)) IntAnswers[field.Id] = 0;
                    break;
                default:
                    if (!StringAnswers.ContainsKey(field.Id)) StringAnswers[field.Id] = string.Empty;
                    break;
            }
        }
    }

    private async Task<bool> CheckAccessToTemplate(int templateId, System.Security.Claims.ClaimsPrincipal user)
    {
        var accessRules = TemplateService.GetAccessRules(templateId);
        if (!accessRules.Any())
            return true;
        if (accessRules.Any(r => r.Email == null && r.Role == null))
            return true;
        var userEmail = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
        if (!string.IsNullOrEmpty(userEmail) && accessRules.Any(r => r.Email == userEmail))
            return true;
        var userRoles = user.Claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role).Select(c => c.Value);
        if (userRoles.Any() && accessRules.Any(r => r.Role != null && userRoles.Contains(r.Role)))
            return true;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(userId))
        {
            var template = TemplateService.GetTemplateById(templateId);
            if (template?.AuthorId == userId)
                return true;
        }
        if (user.Claims.Any(c => c.Type == "role" && c.Value == "Admin"))
            return true;
        return false;
    }

    private void OnSubmit()
    {
        if (userId == null || !hasAccess)
            return;
        
        var existingForm = FormService.GetFormsByTemplateId(Id).FirstOrDefault(f => f.UserId == userId);
        
        Form form;
        if (existingForm != null)
        {
            form = existingForm;
            form.FilledAt = DateTime.UtcNow;
            
            foreach (var field in Template.Fields)
            {
                var existingAnswer = form.Answers.FirstOrDefault(a => a.FieldId == field.Id);
                string answerValue = field.Type switch
                {
                    FieldType.Checkbox => (BoolAnswers.TryGetValue(field.Id, out var b) && b) ? "true" : "false",
                    FieldType.Integer => IntAnswers.TryGetValue(field.Id, out var i) ? i.ToString() : "0",
                    _ => StringAnswers.TryGetValue(field.Id, out var s) ? s : string.Empty
                };
                
                if (existingAnswer != null)
                {
                    existingAnswer.Value = answerValue;
                }
                else
                {
                    form.Answers.Add(new FormAnswer
                    {
                        FieldId = field.Id,
                        Value = answerValue
                    });
                }
            }
        }
        else
        {
            form = new Form
            {
                TemplateId = Id,
                UserId = userId,
                FilledAt = DateTime.UtcNow,
                Answers = new List<FormAnswer>()
            };
            
            foreach (var field in Template.Fields)
            {
                string answerValue = field.Type switch
                {
                    FieldType.Checkbox => (BoolAnswers.TryGetValue(field.Id, out var b) && b) ? "true" : "false",
                    FieldType.Integer => IntAnswers.TryGetValue(field.Id, out var i) ? i.ToString() : "0",
                    _ => StringAnswers.TryGetValue(field.Id, out var s) ? s : string.Empty
                };
                form.Answers.Add(new FormAnswer
                {
                    FieldId = field.Id,
                    Value = answerValue
                });
            }
            FormService.SaveForm(form);
        }
        
        var formId = form.Id;
        Navigation.NavigateTo($"/filled/{formId}");
    }

    private Task HandleSubmit()
    {
        OnSubmit();
        return Task.CompletedTask;
    }

    private void AddLike()
    {
        if (userId == null) return;
        if (userLiked)
        {
            LikeService.RemoveLike(Template.Id, userId);
            userLiked = false;
        }
        else
        {
            LikeService.AddLike(Template.Id, userId);
            userLiked = true;
        }
        likes = LikeService.GetLikesCount(Template.Id);
    }

    private void AddComment()
    {
        if (!string.IsNullOrWhiteSpace(commentText) && userId != null)
        {
            CommentService.AddComment(new Comment {
                TemplateId = Template.Id,
                UserId = userId,
                Text = commentText,
                CreatedAt = DateTime.UtcNow
            });
            comments = CommentService.GetCommentsByTemplateId(Template.Id);
            commentText = string.Empty;
        }
    }

    private bool CanDeleteComment(Comment comment)
    {
        if (userId == null) return false;
        return isAdmin || canEdit || comment.UserId == userId;
    }

    private void DeleteComment(int commentId)
    {
        CommentService.DeleteComment(commentId);
        comments = CommentService.GetCommentsByTemplateId(Template.Id);
    }
} 