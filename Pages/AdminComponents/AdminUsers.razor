@using FormsApp.Data
@inject LocalizationService Loc
@inject IUserService UserService
@inject NavigationManager NavigationManager



<div class="admin-toolbar mb-3">
    <div class="row align-items-center">
        <div class="col-md-4">
            <select class="form-select form-select-sm" @bind="selectedAction">
                <option value="">@Loc["ChooseAction"]</option>
                <option value="block">@Loc["Block"]</option>
                <option value="unblock">@Loc["Unblock"]</option>
                <option value="makeAdmin">@Loc["MakeAdmin"]</option>
                <option value="removeAdmin">@Loc["RemoveAdmin"]</option>
                <option value="delete">@Loc["Delete"]</option>
            </select>
        </div>
        <div class="col-md-4">
            <button class="btn btn-primary btn-sm" @onclick="ApplyAction" disabled="@(string.IsNullOrEmpty(selectedAction) || !selectedUsers.Any())">
                @Loc["Apply"]
            </button>
        </div>
        <div class="col-md-4">
            @if (selectedUsers.Any())
            {
                <span class="text-muted">@selectedUsers.Count / @SortedUsers.Count</span>
            }
        </div>
    </div>
</div>

<div class="table-container">
    <table class="table table-striped admin-table">
        <thead>
            <tr>
                <th>
                    <input type="checkbox" checked="@selectAll" @onchange="OnSelectAllChanged" />
                </th>
                <th class="sortable-header @(GetSortClass("Email"))" @onclick='() => SortUsers("Email")'>
                    Email
                </th>
                <th class="sortable-header @(GetSortClass("Role"))" @onclick='() => SortUsers("Role")'>
                    @Loc["Role"]
                </th>
                <th class="sortable-header @(GetSortClass("IsBlocked"))" @onclick='() => SortUsers("IsBlocked")'>
                    @Loc["Blocked"]
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in SortedUsers)
            {
                <tr @onclick="() => OnUserRowClick(user)" style="cursor:pointer;">
                    <td>
                        <input type="checkbox" checked="@selectedUsers.Contains(user.Id)" @onchange="e => OnUserSelectionChanged(e, user.Id)" @onclick:stopPropagation="true" />
                    </td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>@(user.IsBlocked ? "✔" : "✖")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<ApplicationUser> users = new();
    private string selectedAction = "";
    private List<string> selectedUsers = new();
    private bool selectAll = false;
    private string sortColumn = "Email";
    private bool sortAscending = true;
    private List<ApplicationUser> SortedUsers => GetSorted(users, sortColumn, sortAscending);

    protected override void OnInitialized()
    {
        users = UserService.GetAllUsers();
    }

    private void SortUsers(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
    }

    private string GetSortClass(string field)
    {
        if (sortColumn == field)
        {
            return sortAscending ? "sort-asc" : "sort-desc";
        }
        return string.Empty;
    }

    private void OnSelectAllChanged(ChangeEventArgs e)
    {
        bool newValue = (bool)e.Value;
        selectAll = newValue;
        if (selectAll)
        {
            selectedUsers = SortedUsers.Select(u => u.Id).ToList();
        }
        else
        {
            selectedUsers.Clear();
        }
    }

    private void OnUserSelectionChanged(ChangeEventArgs e, string userId)
    {
        var isChecked = (bool)e.Value;
        if (isChecked)
        {
            if (!selectedUsers.Contains(userId))
                selectedUsers.Add(userId);
        }
        else
        {
            selectedUsers.Remove(userId);
        }
        selectAll = selectedUsers.Count == SortedUsers.Count && SortedUsers.Count > 0;
    }

    private void ApplyAction()
    {
        if (string.IsNullOrEmpty(selectedAction) || !selectedUsers.Any())
            return;
        foreach (var userId in selectedUsers)
        {
            var user = users.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                switch (selectedAction)
                {
                    case "block":
                        user.IsBlocked = true;
                        break;
                    case "unblock":
                        user.IsBlocked = false;
                        break;
                    case "makeAdmin":
                        user.Role = "Admin";
                        break;
                    case "removeAdmin":
                        user.Role = "User";
                        break;
                    case "delete":
                        users.Remove(user);
                        break;
                }
                if (selectedAction != "delete")
                    UserService.SaveUser(user);
                else
                    UserService.DeleteUser(userId);
            }
        }
        users = UserService.GetAllUsers();
        selectedUsers.Clear();
        selectedAction = "";
        selectAll = false;
    }

    private List<ApplicationUser> GetSorted(List<ApplicationUser> users, string column, bool ascending)
    {
        var query = users.AsQueryable();
        switch (column)
        {
            case "Email":
                query = ascending ? query.OrderBy(u => u.Email) : query.OrderByDescending(u => u.Email);
                break;
            case "Role":
                query = ascending ? query.OrderBy(u => u.Role) : query.OrderByDescending(u => u.Role);
                break;
            case "IsBlocked":
                query = ascending ? query.OrderBy(u => u.IsBlocked) : query.OrderByDescending(u => u.IsBlocked);
                break;
            default:
                query = ascending ? query.OrderBy(u => u.Email) : query.OrderByDescending(u => u.Email);
                break;
        }
        return query.ToList();
    }

    private void OnUserRowClick(ApplicationUser user)
    {
        var author = user.UserName ?? user.Email ?? user.Id;
        NavigationManager.NavigateTo($"/?author={Uri.EscapeDataString(author)}", forceLoad: true);
    }
} 