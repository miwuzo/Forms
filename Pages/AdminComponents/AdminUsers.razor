@using FormsApp.Data
@using FormsApp.Shared
@inject LocalizationService Loc
@inject IUserService UserService
@inject NavigationManager NavigationManager

<div class="admin-toolbar mb-3">
    <div class="row align-items-center">
        <div class="col-md-4">
            <select class="form-select form-select-sm" @bind="selectedAction">
                <option value="">@Loc["ChooseAction"]</option>
                <option value="block">@Loc["Block"]</option>
                <option value="unblock">@Loc["Unblock"]</option>
                <option value="makeAdmin">@Loc["MakeAdmin"]</option>
                <option value="removeAdmin">@Loc["RemoveAdmin"]</option>
            </select>
        </div>
        <div class="col-md-4">
            <button class="btn btn-primary btn-sm" @onclick="ApplyAction" disabled="@(string.IsNullOrEmpty(selectedAction) || !selectedUsers.Any())">
                @Loc["Apply"]
            </button>
            <button class="btn btn-danger btn-sm"
                    @onclick="@(() => TableUtils.DeleteSelected(selectedUsers, users, DeleteUser, u => u.Id))"
                    disabled="@(!selectedUsers.Any())">
                @Loc["DeleteSelected"]
            </button>
        </div>
        <div class="col-md-4">
            @if (selectedUsers.Any())
            {
                <span class="text-muted">@selectedUsers.Count / @SortedUsers.Count</span>
            }
        </div>
    </div>
</div>

<SortableTable TItem="ApplicationUser"
               Items="SortedUsers"
               Columns="columns"
               SortField="sortColumn"
               SortDirection="@(sortAscending ? "asc" : "desc")"
               OnSort="OnSort"
               OnRowClick="OnUserRowClick">
    <RowTemplate Context="user">
        <td>
            <input type="checkbox" checked="@selectedUsers.Contains(user.Id)" @onchange="e => TableUtils.UpdateSelection(e, user.Id, selectedUsers, SortedUsers.Select(u => u.Id).ToList())" @onclick:stopPropagation="true" />
        </td>
        <td>@user.Email</td>
        <td>@user.Role</td>
        <td>@(user.IsBlocked ? "✔" : "✖")</td>
    </RowTemplate>
</SortableTable>

@code {
    private List<ApplicationUser> users = new();
    private string selectedAction = "";
    private List<string> selectedUsers = new();
    private string sortColumn = "Email";
    private bool sortAscending = true;
    private List<SortableTable<ApplicationUser>.SortableColumn> columns;
    private Dictionary<string, Func<ApplicationUser, object?>> sortSelectors;
    private List<ApplicationUser> SortedUsers => TableUtils.GetSorted(users, sortColumn, sortAscending, sortSelectors, "Email");

    protected override void OnInitialized()
    {
        users = UserService.GetAllUsers();
        columns = new()
        {
            new() { Title = "", Field = "Select", Sortable = false },
            new() { Title = "Email", Field = "Email", Sortable = true },
            new() { Title = Loc["Role"], Field = "Role", Sortable = true },
            new() { Title = Loc["Blocked"], Field = "IsBlocked", Sortable = true }
        };
        sortSelectors = new()
        {
            ["Email"] = u => u.Email ?? string.Empty,
            ["Role"] = u => u.Role ?? string.Empty,
            ["IsBlocked"] = u => u.IsBlocked
        };
    }

    private void OnSort(string column) => TableUtils.OnSort(ref sortColumn, ref sortAscending, column);

    private void ApplyAction()
    {
        if (string.IsNullOrEmpty(selectedAction) || !selectedUsers.Any())
            return;
        foreach (var userId in selectedUsers)
        {
            var user = users.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                switch (selectedAction)
                {
                    case "block":
                        user.IsBlocked = true;
                        break;
                    case "unblock":
                        user.IsBlocked = false;
                        break;
                    case "makeAdmin":
                        user.Role = "Admin";
                        break;
                    case "removeAdmin":
                        user.Role = "User";
                        break;
                }
                if (selectedAction != "delete")
                    UserService.SaveUser(user);
            }
        }
        users = UserService.GetAllUsers();
        selectedUsers.Clear();
        selectedAction = "";
    }

    private void DeleteUser(string userId) => TableUtils.DeleteItem(userId, users, UserService.DeleteUser, u => u.Id);

    private void OnUserRowClick(ApplicationUser user) => NavigationManager.NavigateTo($"/?author={Uri.EscapeDataString(user.UserName ?? user.Email ?? user.Id)}", forceLoad: true);
} 