@page "/edit-filled/{Id:int}"
@using FormsApp.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider
@inject LocalizationService Loc
@inject IFormService FormService

<PageTitle>@Loc["EditFilledFormTitle"]</PageTitle>

<div class="container mt-4">
    @if (isLoading)
    {
        <div>@Loc["Loading"]</div>
    }
    else if (!canEdit)
    {
        <div class="alert alert-danger">@Loc["NoEditRights"]</div>
    }
    else if (Form == null || Template == null)
    {
        <div class="alert alert-warning">@Loc["FormNotFound"]</div>
    }
    else
    {
        <h2>@Template.Title</h2>
        <p>@Template.Description</p>
        <EditFilledFormInner Template="Template" Model="Model" Form="Form" CanEdit="canEdit" OnSaved="OnSaved" OnSuccess="OnSuccess" />
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    private Form? Form;
    private Template? Template;
    private EditFilledFormModel Model = new();
    private string? userId;
    private bool canEdit = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/Identity/Account/Login", true);
            return;
        }
        Form = FormService.GetFormById(Id);
        if (Form != null)
        {
            Template = Form.Template;
            InitializeModel();
        }
        var user = authState.User;
        userId = user.Identity?.IsAuthenticated == true ? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value : null;
        canEdit = user.Identity?.IsAuthenticated == true && (userId == Form?.UserId || user.Claims.Any(c => c.Type == "role" && c.Value == "Admin"));
        isLoading = false;
    }

    private void InitializeModel()
    {
        if (Template == null || Form == null) return;
        foreach (var field in Template.Fields)
        {
            var answer = Form.Answers.FirstOrDefault(a => a.FieldId == field.Id);
            switch (field.Type)
            {
                case FieldType.Checkbox:
                    Model.BoolAnswers[field.Id] = answer != null && answer.Value == "true";
                    break;
                case FieldType.Integer:
                    Model.IntAnswers[field.Id] = answer != null && int.TryParse(answer.Value, out var i) ? i : 0;
                    break;
                default:
                    Model.StringAnswers[field.Id] = answer?.Value ?? string.Empty;
                    break;
            }
        }
    }

    private void OnSaved()
    {
        FormService.SaveForm(Form!);
        Navigation.NavigateTo($"/filled/{Form?.Id}");
    }
    private void OnSuccess(string msg) { }
}